### Przetwarzanie Danych Ustrukturyzowanych 2023L
### Praca domowa nr. 3
###
### UWAGA:
### nazwy funkcji oraz ich parametrow powinny pozostac niezmienione.
###  
### Wskazane fragmenty kodu przed wyslaniem rozwiazania powinny zostac 
### zakomentowane
###

# -----------------------------------------------------------------------------#
# Wczytanie danych oraz pakietow.
# install.packages('microbenchmark')
# install.packages('sqldf')
# install.packages('dplyr')
# install.packages("data.table") 
# install.packages('compare')
library('sqldf')
library ('magrittr')
library ('dplyr')
library('data.table')
library('compare')
library('microbenchmark')
Users <- read.csv('./Users.csv')
Comments <- read.csv('./Comments.csv')
Posts <- read.csv('./Posts.csv')
# !!! Przed wyslaniem zakomentuj ten fragment
# -----------------------------------------------------------------------------#




# -----------------------------------------------------------------------------#
# Zadanie 1
# -----------------------------------------------------------------------------#
# 
sql_1 <- function(Users){
  data<-sqldf("SELECT Location, SUM(UpVotes) as TotalUpVotes FROM Users
        WHERE Location != ''
        GROUP BY Location
        ORDER BY TotalUpVotes DESC
        LIMIT 10")
}
# 
base_1 <- function(Users){
   
    data<- Users[Users$Location!="",]
    data <- aggregate(UpVotes ~ Location ,data=data,FUN=sum)

    data <- data[order(data$UpVotes,decreasing=TRUE),]
    colnames(data)[colnames(data)=="UpVotes"]="TotalUpVotes"
    data<-data[1:10,]
  }


dplyr_1 <- function(Users){
    # Tu umiesc rozwiazanie oraz komentarze
    #
  data <- Users
  # data %>% head()
  data <- data %>% filter(Location!='')
  data <- data %>% group_by(Location) %>% summarise(TotalUpVotes = sum(UpVotes)) %>%arrange(desc(TotalUpVotes))

  data<-data[1:10,]

}
# 
table_1 <- function(Users){
    # Tu umiesc rozwiazanie oraz komentarze
    #
  dt <- data.table(Users)
  dt <- dt[Location!=""]
  # dt<-dt[,.(UpVotes,Location)]

  dt<- dt[,.(TotalUpVotes=sum(UpVotes)),by=Location]
  # setnames(dt,"UpVotes","TotalUpVotes")

  dt<- dt[order(-TotalUpVotes)]
  dt<-dt[1:10]
}

# Sprawdzenie rownowaznosci wynikow - zakomentuj te czesc przed wyslaniem

# Porowanie czasow wykonania - zakomentuj te czesc przed wyslaniem


# -----------------------------------------------------------------------------#
# Zadanie 2
# -----------------------------------------------------------------------------#

sql_2 <- function(Posts){
    sql_data<-sqldf("SELECT STRFTIME('%Y', CreationDate) AS Year, STRFTIME('%m', CreationDate) AS Month,
COUNT(*) AS PostsNumber, MAX(Score) AS MaxScore
FROM Posts
WHERE postTypeId IN (1, 2)
GROUP BY Year, Month
HAVING PostsNumber > 1000")
}

# COUNT(*) AS PostsNumber, MAX(Score) AS MaxScore
# FROM posts
# GROUP BY month,year

base_2 <- function(Posts){
    # Tu umiesc rozwiazanie oraz komentarze
    #
  data <- Posts
  data$Year <- format(as.Date(data$CreationDate), "%Y")
  data$Month <- format(as.Date(data$CreationDate), "%m")

  data <- subset(data, PostTypeId %in% c(1, 2))


  data <- aggregate(list(PostsNumber = data$Score), data[, c("Year", "Month")], function(x) {
    c(PostsNumber = length(x), MaxScore = max(x)) #Pytanie - jak to zrobic bez tych glupich zagniezdzonych kolumn
  })
  test <- data$PostsNumber
  test[,'MaxScore']
  # colnames(test)
  data <- data.frame(Year=data$Year,Month=data$Month,PostsNumber=test[,'PostsNumber'],MaxScore=test[,'MaxScore'])
  data <- data[data$PostsNumber>1000,]





  # data <- data[data$PostNumber>1000,]
}

dplyr_2 <- function(Posts){
    # Tu umiesc rozwiazanie oraz komentarze
    #
  data<-Posts
  # data$Year <- format(as.Date(data$CreationDate), "%Y")
  # data$Month <- format(as.Date(data$CreationDate), "%m")
  #
  # data<- select()
  # data<- data %>% filter(PostTypeId==1 | PostTypeId==2)
  # data <- data %>% group_by(Year,Month,PostsNumber,Score)
  data<-Posts %>%
    filter(PostTypeId %in% c(1,2)) %>%
    mutate(Year=format(as.Date(CreationDate),"%Y"),Month = format(as.Date(CreationDate),"%m")) %>%
    group_by(Year,Month) %>%
    summarise(Score=max(Score),PostsNumber = n()) %>%
    select(Year,Month,PostsNumber,Score) %>%
    filter(PostsNumber>1000)

  data <- data%>% rename(MaxScore=Score)

}

table_2 <- function(Posts){
    # Tu umiesc rozwiazanie oraz komentarze
    # 
    data <- as.data.table(Posts)
    # data <- data[!is.na(CreationDate)]
    data <-data[, Year:=format(as.Date(CreationDate), "%Y")]
    data <-data[, Month:=format(as.Date(CreationDate), "%m")]
    data<- data[PostTypeId==1 | PostTypeId==2, .(MaxScore = max(Score), PostsNumber=.N),by=.(Year,Month)]
    data<-data[PostsNumber>1000]
  
}

# Sprawdzenie rownowaznosci wynikow - zakomentuj te czesc przed wyslaniem

# Porowanie czasow wykonania - zakomentuj te czesc przed wyslaniem


# -----------------------------------------------------------------------------#
# Zadanie 3
# -----------------------------------------------------------------------------#

sql_3 <- function(Posts, Users){
#     # Tu umiesc rozwiazanie oraz komentarze
#     #
  data_sql<- sqldf("SELECT Id, DisplayName, TotalViews
FROM (
SELECT OwnerUserId, SUM(ViewCount) as TotalViews
FROM Posts
WHERE PostTypeId = 1
GROUP BY OwnerUserId
) AS Questions
JOIN Users
ON Users.Id = Questions.OwnerUserId
ORDER BY TotalViews DESC
LIMIT 10")
}

base_3 <- function(Posts, Users){
    # Tu umiesc rozwiazanie oraz komentarze
    #
  data_questions <- Posts
  data_questions<- data_questions[data_questions$PostTypeId==1,]
  # data <- aggregate(list(PostsNumber = data$Score), data[, c("Year", "Month")], function(x) {
  #       c(PostsNumber = length(x), MaxScore = max(x)) #Pytanie - jak to zrobic bez tych glupich zagniezdzonych kolumn
  # data <- aggregate(UpVotes ~ Location ,data=data,FUN=sum)
  # data_questions <- aggregate(list(TotalViews = data_questions$ViewCount),data_questions[,c('OwnerUserId')],FUN=sum)
  data_questions <- aggregate(cbind( ViewCount) ~ OwnerUserId,data=data_questions,FUN=sum)
  # head(data_questions)

  data <- merge(data_questions,Users,by.x="OwnerUserId",by.y="Id")
  data<- data[order(data$ViewCount,decreasing=TRUE),]
  # data <- data.frame(data$Id,data$DisplayName,data$ViewCount)
  data <- data[,c('OwnerUserId',"DisplayName","ViewCount")]
  colnames(data)<-c('Id','DisplayName','TotalViews')
  data<- data[1:10,]
}

dplyr_3 <- function(Posts, Users){
  # Tu umiesc rozwiazanie oraz komentarze

  data_questions <- Posts
  data_questions <- data_questions %>%
    filter(PostTypeId==1) %>%
    group_by(OwnerUserId) %>%
    summarise(TotalViews = sum(ViewCount),across(everything(),first)) %>%
    inner_join(Users,by=c("OwnerUserId" = "Id")) %>%
    arrange(desc(TotalViews)) %>%
    mutate(Id=OwnerUserId) %>%
    select(Id,DisplayName,TotalViews) %>%
    head(10)
  
}

table_3 <- function(Posts, Users){
  # Tu umiesc rozwiazanie oraz komentarze

  data_questions <-as.data.table(Posts)
  data_questions <- data_questions[PostTypeId==1, .(TotalViews = sum(ViewCount)),OwnerUserId]
  data <- as.data.table(merge(data_questions,Users,by.x="OwnerUserId",by.y="Id"))
  data<-data[order(-TotalViews)]
  data<-data[1:10]
  data<-data[,.(Id=OwnerUserId,DisplayName,TotalViews)]
}

# Sprawdzenie rownowaznosci wynikow - zakomentuj te czesc przed wyslaniem

# Porowanie czasow wykonania - zakomentuj te czesc przed wyslaniem


# -----------------------------------------------------------------------------#
# Zadanie  4
# -----------------------------------------------------------------------------#

sql_4 <- function(Posts, Users){
sql_data <- sqldf("SELECT DisplayName, QuestionsNumber, AnswersNumber, Location, Reputation, UpVotes, DownVotes
FROM (
SELECT *
FROM (
SELECT COUNT(*) as AnswersNumber, OwnerUserId
FROM Posts
WHERE PostTypeId = 2
GROUP BY OwnerUserId
) AS Answers
JOIN
(
SELECT COUNT(*) as QuestionsNumber, OwnerUserId
FROM Posts
WHERE PostTypeId = 1
GROUP BY OwnerUserId
) AS Questions
ON Answers.OwnerUserId = Questions.OwnerUserId
WHERE AnswersNumber > QuestionsNumber
ORDER BY AnswersNumber DESC
LIMIT 5
) AS PostsCounts
JOIN Users
ON PostsCounts.OwnerUserId = Users.Id")
}

base_4 <- function(Posts, Users){

  data_answers <- Posts
  data_answers<-data_answers[data_answers$PostTypeId==2,]

  data_answers<-aggregate(cbind(Id)~OwnerUserId,data=data_answers,FUN=length,na.action = NULL)
 colnames(data_answers) <- c("OwnerUserId", "AnswersNumber")


 data_questions <- Posts
 data_questions<-data_questions[data_questions$PostTypeId==1,]
 data_questions <- aggregate(Id ~ OwnerUserId,data=data_questions,FUN=length,na.action = NULL)
 colnames(data_questions) <- c( "OwnerUserId","QuestionsNumber")

 data_postcounts <- merge(data_answers,data_questions,by.x="OwnerUserId",by.y="OwnerUserId")
 data_postcounts<- data_postcounts[data_postcounts$AnswersNumber > data_postcounts$QuestionsNumber,]
 data_postcounts<- data_postcounts[order(data_postcounts$AnswersNumber,decreasing=TRUE),]
 data_postcounts=data_postcounts[1:5,]
 #
 data <- merge(data_postcounts,Users,by.x="OwnerUserId",by.y="Id")
  data<- data[c("DisplayName", "QuestionsNumber", "AnswersNumber", "Location","Reputation","UpVotes" , "DownVotes")]


 

}

dplyr_4 <- function(Posts, Users){

  data_answers <- Posts
   data_answers<- data_answers %>%
      filter(PostTypeId==2) %>%
      group_by(OwnerUserId) %>%
      summarise(AnswersNumber=n())

    data_question <- Posts
    data_question<- data_question %>%
      filter(PostTypeId==1) %>%
      group_by(OwnerUserId) %>%
      summarise(QuestionsNumber = n())


    data_answers <- data_answers %>%
      filter(!is.na(OwnerUserId)) %>%
      inner_join(data_question,by="OwnerUserId")%>%
      filter(AnswersNumber > QuestionsNumber)%>%
      arrange(desc(AnswersNumber)) %>%
      head(5) %>%
      inner_join(Users ,by=c("OwnerUserId"="Id"))%>%
      select(DisplayName, QuestionsNumber, AnswersNumber, Location, Reputation, UpVotes, DownVotes)

    data_4 <-data_answers
  #
 
  
  
  
      
    
}
# 
table_4 <- function(Posts, Users){
    # Tu umiesc rozwiazanie oraz komentarze
    #
  data_answers<- as.data.table(Posts)
  data_answers<-data_answers[PostTypeId==2,.(AnswersNumber = .N),OwnerUserId]

  data_questions <- as.data.table(Posts)
  data_questions <- data_questions[PostTypeId==1, .(QuestionsNumber = .N),OwnerUserId]

  data <- as.data.table(merge(data_answers,data_questions,by="OwnerUserId"))
  data <- data[AnswersNumber > QuestionsNumber]
  data <- data[order(-AnswersNumber)]
  data <- data[1:6]

  data <- merge(data,Users,by.x="OwnerUserId",by.y="Id")
  data<-data[,.(DisplayName, QuestionsNumber, AnswersNumber, Location, Reputation, UpVotes, DownVotes)]
  
}

# Sprawdzenie rownowaznosci wynikow - zakomentuj te czesc przed wyslaniem

# Porowanie czasow wykonania - zakomentuj te czesc przed wyslaniem


# -----------------------------------------------------------------------------#
# Zadanie 5
# -----------------------------------------------------------------------------#

# sql_5 <- function(Posts, Comments, Users){
#     # Tu umiesc rozwiazanie oraz komentarze
#     # 
# }
# 
base_5 <- function(Posts, Comments, Users){
    

    data_cmt <-Comments
    data_cmt <- aggregate(Score ~ PostId,data=data_cmt,FUN=sum)
    colnames(data_cmt) <- c("PostId","CommentsTotalScore")


    data_posts_best_comments = merge(data_cmt,Posts,by.x="PostId",by.y="Id")
    data_posts_best_comments=data_posts_best_comments[data_posts_best_comments$PostTypeId==1,]

    data<- merge(data_posts_best_comments,Users,by.x="OwnerUserId",by.y="Id")
    data<- data[order(data$CommentsTotalScore,decreasing=TRUE),]
    data<-data[1:10,]
    data <- data[c("Title", "CommentCount", "ViewCount", "CommentsTotalScore", "DisplayName", "Reputation", "Location")]
}
# 
dplyr_5 <- function(Posts, Comments, Users){
    data_cmt <- Comments
    data_cmt <- data_cmt %>%
      group_by(PostId) %>%
      summarise(CommentsTotalScore =sum(Score)) %>%
      inner_join(Posts,by=c("PostId"="Id")) %>%
      filter(PostTypeId==1) %>%
      inner_join(Users,by=c("OwnerUserId"="Id")) %>%
      arrange(desc(CommentsTotalScore)) %>%
      head(10) %>%
      select("Title", "CommentCount", "ViewCount", "CommentsTotalScore", "DisplayName", "Reputation", "Location")
}
# 
table_5 <- function(Posts, Comments, Users){
    # Tu umiesc rozwiazanie oraz komentarze
    #
  data_cmt <- as.data.table(Comments)
  data_cmt <- data_cmt[,.(CommentsTotalScore=sum(Score)),PostId]

  data_posts_best_comments <- as.data.table( merge(data_cmt,Posts,by.x="PostId",by.y="Id"))
  data_posts_best_comments <- data_posts_best_comments[PostTypeId==1]

  data <- merge(data_posts_best_comments,Users,by.x="OwnerUserId",by.y="Id")
  data <- data[order(-CommentsTotalScore)]
  data <- data[1:10]
  data <- data[,.(Title, CommentCount, ViewCount, CommentsTotalScore, DisplayName, Reputation, Location)]

  
  
}

# Sprawdzenie rownowaznosci wynikow - zakomentuj te czesc przed wyslaniem

#1
data_base_1=base_1(Users)
data_sqldf_1=sql_1(Users)
data_dplyr_1=dplyr_1(Users)
data_table_1=table_1(Users)

compare(data_sqldf_1,data_dplyr_1,allowAll=TRUE)
compare(data_sqldf_1,data_base_1,allowAll=TRUE)
compare(data_sqldf_1,data_table_1,allowAll=TRUE)

#2
data_base_2=base_2(Posts) 
data_sqldf_2=sql_2(Posts)
data_dplyr_2=dplyr_2(Posts)
data_table_2=table_2(Posts)

compare(data_sqldf_2,data_dplyr_2,allowAll=TRUE)
compare(data_sqldf_2,data_base_2,allowAll=TRUE)
compare(data_sqldf_2,data_table_2,allowAll=TRUE)

#3
data_base_3=base_3(Posts,Users)
data_sqldf_3=sql_3(Posts,Users)
data_dplyr_3=dplyr_3(Posts,Users)
data_table_3=table_3(Posts,Users)

compare(data_sqldf_3,data_dplyr_3,allowAll=TRUE)
compare(data_sqldf_3,data_base_3,allowAll=TRUE)
compare(data_sqldf_3,data_table_3,allowAll=TRUE)

#4
data_base_4=base_4(Posts,Users)
data_sqldf_4=sql_4(Posts,Users)
data_dplyr_4=dplyr_4(Posts,Users)
data_table_4=table_4(Posts,Users)

compare(data_sqldf_4,data_dplyr_4,allowAll=TRUE)
compare(data_sqldf_4,data_base_4,allowAll=TRUE)
compare(data_sqldf_4,data_table_4,allowAll=TRUE)


data_base_5=base_5(Posts,Comments,Users)
# data_sqldf_5=sql_5(Posts,Comments,Users)
data_dplyr_5=dplyr_5(Posts,Comments,Users)
data_table_5=table_5(Posts,Comments,Users)

# compare(data_sqldf_5,data_dplyr_5,allowAll=TRUE)
compare(data_dplyr_5,data_base_5,allowAll=TRUE)
compare(data_dplyr_5,data_table_5,allowAll=TRUE)


# Porowanie czasow wykonania - zakomentuj te czesc przed wyslaniem
# microbenchmark(
#   sql_1(Users),
#   base_1(Users),
#   dplyr_1(Users),
#   table_1(Users),
#   times=10
# )
# microbenchmark(
#   sql_2(Posts),
#   base_2(Posts),
#   dplyr_2(Posts),
#   table_2(Posts),
#   times=10
# )
# microbenchmark(
#   sql_3(Posts,Users),
#   base_3(Posts,Users),
#   dplyr_3(Posts,Users),
#   table_3(Posts,Users),
#   times=10
# )
# microbenchmark(
#   sql_4(Posts,Users),
#   base_4(Posts,Users),
#   dplyr_4(Posts,Users),
#   table_4(Posts,Users),
#   times=10
# )
# microbenchmark(
#   # sql_5(Posts,Comments,Users),
#   base_5(Posts,Comments,Users),
#   dplyr_5(Posts,Comments,Users),
#   table_5(Posts,Comments,Users),
#   times=10
# )



